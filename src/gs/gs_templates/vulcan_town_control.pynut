class VulcanTownControl {
    /* structure for town control */

    function Init() {
        // note that this creates a table in root
        // not designed to return a class instance
        // vulcan_town_control is a singleton, and allegedly a table with slots is more efficient for that case than a singleton class instance
        ::vulcan_town_control <- {};
        vulcan_town_control.towns <- {};
        local town_list = GSTownList();
        foreach (town, _ in town_list) {
            vulcan_town_control.towns[town] <- VulcanTown(town);
        }
        VulcanTownControl.RunPeriodicProcessing("Init");
    }

    function RunPeriodicProcessing(caller_type) {
        local time_start = GSDate.GetSystemTime();
        Log.Info("--");
        Log.Info("Town periodic processing...");
        // book-keep town industries, we do this once for all towns as it walks all industries, and shouldn't be called recursively for every town
        VulcanTownControl.BookKeepVulcanTownIndustries();
        // we use towns sorted by name as it will result in logging ordered by town name, which is convenient
        foreach (vulcan_town in VulcanTownControl.GetVulcanTownsSortedByName()) {
            Log.Info(GSTown.GetName(vulcan_town.town) + "...");
            Log.Info("...update required cargos delivery stats");
            foreach (cargo_label, required_cargo in vulcan_town.required_cargos) {
                required_cargo.UpdateDeliveryStats(vulcan_town);
            }
            Log.Info("...setting town growth rates");
            vulcan_town.SetGrowthRate();
            Log.Info("...setting town window texts");
            vulcan_town.SetTownWindowText();
            if (caller_type != "Init") {
                Log.Info("...updating town story pages");
                vulcan_town.UpdateTownStoryPage();
            }
        }
        Log.Info("Town periodic processing done. Elapsed time: " + (GSDate.GetSystemTime() - time_start));
    }


    function BookKeepVulcanTownIndustries() {
        Log.Info("...book-keeping town industries");
        // we call this in the periodic processing to account for any industries that opened / closed
        // doing this in periodic processing is preferable to trying to book-keep by handling industry open / close events
        // clean the existing list of industries for each town
        foreach (town, vulcan_town in vulcan_town_control.towns) {
            vulcan_town.town_industries = [];
        }
        local industry_list = GSIndustryList();
        foreach (industry, _ in industry_list) {
            local industry_town = GSTile.GetClosestTown(GSIndustry.GetLocation(industry));
            vulcan_town_control.towns[industry_town].town_industries.append(industry);
        }
    }

    function GetVulcanTownsSortedByName() {
        // vulcan_town_control.towns is a table, so we can't rely on the order, provide this sort function as a convenience
        local cmp_name = function(a, b) {
            local name_a = GSTown.GetName(a.town);
            local name_b = GSTown.GetName(b.town);
            if (name_a > name_b) return 1
            else if (name_a < name_b) return -1
            return 0;
        }
        local result = [];
        local town_list = vulcan_town_control.towns;
        foreach (town, vulcan_town in town_list) {
            result.append(vulcan_town);
        }
        result.sort(cmp_name);
        return result;
    }

}

class VulcanTown {
    /* stores extended info / metadata about a town instance */

    // store the numeric town id as we may need it for looking up other things
    // town id is also available as the key in vulcan_town_control.towns
    town = null;
    required_cargos = null;
    town_industries = null;

    constructor(town) {
        this.town = town;
        // !! temp cargos
        // !! these may be 'required' for different things, e.g. happiness, town growth etc
        // !! needs delegated to the python economy definition
        // !! we really need some cargos to be at specific industry instances
        // !! e.g. structural steel, glass are town growth cargos and also used at secondary industry
        this.required_cargos = {}
        foreach (cargo_label in ["PASS", "FOOD", "VEHI", "GOOD", "HWAR", "CCPR"]) {
            local cargo = firs.active_economy.cargo_ids_by_label[cargo_label];
            this.required_cargos[cargo_label] <- VulcanTownRequiredCargo(this, cargo);
        }
        town_industries = [];
    }

    function SetGrowthRate() {
        local town_satisfied = false;
        foreach (cargo_label, required_cargo in this.required_cargos) {
            if (required_cargo.TotalRecentlyDelivered() > 100) {
                town_satisfied = true;
                break;
            }
        }
        if (town_satisfied == true) {
            GSTown.SetGrowthRate(this.town, GSTown.TOWN_GROWTH_NORMAL);
        } else {
            GSTown.SetGrowthRate(this.town, GSTown.TOWN_GROWTH_NONE);
        }
    }

    function SetTownWindowText() {
        local text = GSText(GSText.STR_CABBAGE_TOWN, this.town);
        GSTown.SetText(this.town, text);
    }

    function UpdateTownStoryPage() {
        vulcan_town_control.story_pages[this.town].UpdatePage(this);
    }

}

class VulcanTownRequiredCargo {

    cargo = null;
    delivery_stats = null;

    constructor(vulcan_town, cargo) {
        this.cargo = cargo;
        this.delivery_stats = {
            monthly_delivered_amounts = [],
        }
    }

    function _tostring() {
        // intended for easy logging output
        local result = "";
        result += GSCargo.GetName(this.cargo) + " (" + GSCargo.GetCargoLabel(this.cargo) + "). Monthly deliveries (oldest..newest): ";
        result += "["
        foreach (delivered_amount in this.delivery_stats.monthly_delivered_amounts) {
            result = result + delivered_amount + ", "
        }
        result = result.slice(0, -2); // knock off the last "," (couldn't find any convenient array.join)
        result += "]. "
        result += "Total recently delivered: " + this.TotalRecentlyDelivered() + ".";
        return result
    }

    function UpdateDeliveryStats(vulcan_town) {
        // we will need to net off any cargo delivered to industries that aren't town sinks, so find those
        local industries_with_delivery_excluded = [];
        foreach (industry in vulcan_town.town_industries) {
            Log.Info(GSIndustry.GetName(industry) + " " + GSIndustry.GetIndustryType(industry) + " " + firs.industries["builders_yard"].global_id);
            if (GSIndustry.GetIndustryType(industry) == firs.industries["builders_yard"].global_id) {
                Log.Info("found a builders yard, it's allowed, skip");
                continue;
            }
            foreach (cargo, _ in GSIndustryType.GetAcceptedCargo(GSIndustry.GetIndustryType(industry))) {
                if (cargo == this.cargo) {
                    industries_with_delivery_excluded.append(industry);
                }
            }
        }
        local total_town_cargo_delivered_all_companies = 0;
        local total_excluded_industry_cargo_delivered_all_companies = 0;
        // need to monitor all companies
        foreach (company in TempGetCompanies()) {
            // cargo monitors are both created by and monitored by a call to GSCargoMonitor.GetTownDeliveryAmount
            // so we don't need a separate creation method
            // !!! will need to net off any cargos delivered to secondary industry types?
            total_town_cargo_delivered_all_companies += GSCargoMonitor.GetTownDeliveryAmount(company, this.cargo, vulcan_town.town, true);
            foreach (industry in industries_with_delivery_excluded) {
                // we assign the delivered amount to a local in case we want to log it, as calling the CargoMonitor repeatedly resets the delivered counts each time
                local excluded_industry_cargo_delivered = GSCargoMonitor.GetIndustryDeliveryAmount(company, this.cargo, industry, true);
                total_excluded_industry_cargo_delivered_all_companies += excluded_industry_cargo_delivered;
            }
        }
        this.delivery_stats.monthly_delivered_amounts.append(total_town_cargo_delivered_all_companies - total_excluded_industry_cargo_delivered_all_companies);
        // only need to keep 3 months of deliveries
        if (this.delivery_stats.monthly_delivered_amounts.len() > 3) {
            this.delivery_stats.monthly_delivered_amounts.remove(0);
        }
        Log.Info("..." + this.tostring());
        Log.Info("...total_excluded_industry_cargo_delivered_all_companies: " + total_excluded_industry_cargo_delivered_all_companies);
    }

    function TotalRecentlyDelivered() {
        // sums across monthly deliveries
        local result = 0;
        foreach (delivered_amount in this.delivery_stats.monthly_delivered_amounts) {
            result += delivered_amount;
        }
        return result
    }
}


class VulcanTownStoryBook {

    function Init() {
        // note that this creates a table in root
        // not designed to return a class instance
        // vulcan_town_story_book is a singleton, and allegedly a table with slots is more efficient for that case than a singleton class instance
        vulcan_town_control.story_pages <- {};
        VulcanTownStoryBook.AddTownStoryPages();
    }

    function AddTownStoryPages() {
        foreach (vulcan_town in VulcanTownControl.GetVulcanTownsSortedByName()) {
            vulcan_town_control.story_pages[vulcan_town.town] <- VulcanTownStoryPage(vulcan_town);
        }
    }
}

class VulcanTownStoryPage {

    // keep a copy of the story page (for convenience)
    story_page = null
    page_elements = null

    constructor(vulcan_town) {
        local town_name = GSTown.GetName(vulcan_town.town);
        this.story_page = GSStoryPage.New(GSCompany.COMPANY_INVALID, "Town: " + town_name);
        // define the elements
        this.page_elements = {};
        this.page_elements["display_test"] <- {
            reference = null,
            text_method = this.TestCabbage
        };
        this.page_elements["display_growth_rate"] <- {
            reference = null,
            text_method = this.DisplayGrowthRate
        };
        // add the elements
        foreach (page_element_name, page_element in this.page_elements) {
            this.page_elements[page_element_name].reference = GSStoryPage.NewElement(this.story_page, GSStoryPage.SPET_TEXT, 1, page_element.text_method(vulcan_town));
        }
    }

    function TestCabbage(vulcan_town) {
        local cabbage = ["Ham", "Eggs", "Popeye", "Alligator", "Zebedee", "The KLF"][GSBase.RandRange(5)];
        return GSText(GSText.STR_TOWN_STORY_PAGE_TEST, cabbage);
    }

    function DisplayGrowthRate(vulcan_town) {
        local growth_rate_value_text = GSTown.GetGrowthRate(vulcan_town.town).tostring();
        if (GSTown.GetGrowthRate(vulcan_town.town) == GSTown.TOWN_GROWTH_NONE) {
            growth_rate_value_text = " not growing";
        }
        return GSText(GSText.STR_TOWN_STORY_PAGE_GROWTH_RATE, growth_rate_value_text);
    }

    function UpdatePage(vulcan_town) {
        foreach (page_element_name, page_element in this.page_elements) {
            GSStoryPage.UpdateElement(page_element.reference, 1, page_element.text_method(vulcan_town));
        }
        GSStoryPage.SetDate(this.story_page, GSDate.GetCurrentDate());
    }
}
