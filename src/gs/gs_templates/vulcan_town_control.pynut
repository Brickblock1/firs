class VulcanTownControl {
    /* structure for town control */

    function Init() {
        // note that this creates a table in root
        // not designed to return a class instance
        // vulcan_town_control is a singleton, and allegedly a table with slots is more efficient for that case than a singleton class instance
        ::vulcan_town_control <- {};
        vulcan_town_control.towns <- {};
        local town_list = GSTownList();
        foreach (town, _ in town_list) {
            vulcan_town_control.towns[town] <- VulcanTown(town);
        }
        VulcanTownControl.RunPeriodicProcessing("Init");
    }

    function RunPeriodicProcessing(caller_type) {
        local time_start = GSDate.GetSystemTime();
        Log.Info("--");
        Log.Info("Town periodic processing...");
        foreach (vulcan_town in vulcan_town_control.towns) {
            Log.Info(GSTown.GetName(vulcan_town.town) + "...");
            Log.Info("...updating cargo monitors");
            vulcan_town.UpdateCargoMonitors();
            Log.Info("...setting town growth rates");
            vulcan_town.SetGrowthRate();
            Log.Info("...setting town window texts");
            vulcan_town.SetTownWindowText();
            if (caller_type != "Init") {
                Log.Info("...updating town story pages");
                vulcan_town.UpdateTownStoryPage();
            }
        }
        Log.Info("Town periodic processing done. Elapsed time: " + (GSDate.GetSystemTime() - time_start));
    }

}

class VulcanTown {
    /* stores extended info / metadata about a town instance */

    // store the numeric town id as we may need it for looking up other things
    // town id is also available as the key in vulcan_town_control.towns
    town = null;
    required_cargos = null;

    constructor(town) {
        this.town = town;
        // !! temp cargos
        // !! these may be 'required' for different things, e.g. happiness, town growth etc
        // !! needs delegated to the python economy definition
        // !! we really need some cargos to be at specific industry instances
        // !! e.g. structural steel, glass are town growth cargos and also used at secondary industry
        this.required_cargos = {}
        foreach (cargo_label in ["PASS", "FOOD", "VEHI", "GOOD", "HWAR", "CCPR"]) {
            this.required_cargos[cargo_label] <- {
                monthly_delivered_amounts = []
            };
        }
    }

    function UpdateCargoMonitors() {
        // cargo monitors are both created by and monitored by a call to GSCargoMonitor.GetTownDeliveryAmount
        // so we don't need a separate creation method
        foreach (cargo_label, delivery_stats in required_cargos) {
            local cargo = firs.active_economy.cargo_ids_by_label[cargo_label];
            local total_cargo_delivered_all_companies = 0;
            // need to monitor all companies
            foreach (company in TempGetCompanies()) {
                // !!! will need to net off any cargos delivered to secondary industry types?
                total_cargo_delivered_all_companies += GSCargoMonitor.GetTownDeliveryAmount(company, cargo, this.town, true);
            }
            delivery_stats.monthly_delivered_amounts.append(total_cargo_delivered_all_companies);
            local delivery_stats_repr = "";
            foreach (delivered_amount in delivery_stats.monthly_delivered_amounts) {
                delivery_stats_repr = delivery_stats_repr + delivered_amount + ", "
            }
            Log.Info("..." + cargo_label + ": " + delivery_stats_repr);
        }
    }

    function SetGrowthRate() {
        // !! GSTown.SetGrowthRate(this.town, GSTown.TOWN_GROWTH_NORMAL);
        GSTown.SetGrowthRate(this.town, GSTown.TOWN_GROWTH_NONE);
    }

    function SetTownWindowText() {
        local text = GSText(GSText.STR_CABBAGE_TOWN, this.town);
        GSTown.SetText(this.town, text);
    }

    function UpdateTownStoryPage() {
        vulcan_town_control.story_pages[this.town].UpdatePage(this);
    }

}

class VulcanTownStoryBook {

    function Init() {
        // note that this creates a table in root
        // not designed to return a class instance
        // vulcan_town_story_book is a singleton, and allegedly a table with slots is more efficient for that case than a singleton class instance
        vulcan_town_control.story_pages <- {};
        VulcanTownStoryBook.AddTownStoryPages();
    }

    function AddTownStoryPages() {
        foreach (town, vulcan_town in vulcan_town_control.towns) {
            vulcan_town_control.story_pages[town] <- VulcanTownStoryPage(vulcan_town);
        }
    }
}

class VulcanTownStoryPage {

    // keep a copy of the story page (for convenience)
    story_page = null
    page_elements = null

    constructor(vulcan_town) {
        local town_name = GSTown.GetName(vulcan_town.town);
        this.story_page = GSStoryPage.New(GSCompany.COMPANY_INVALID, "Town: " + town_name);
        // define the elements
        this.page_elements = {};
        this.page_elements["display_test"] <- {
            reference = null,
            text_method = this.TestCabbage
        };
        this.page_elements["display_growth_rate"] <- {
            reference = null,
            text_method = this.DisplayGrowthRate
        };
        // add the elements
        foreach (page_element_name, page_element in this.page_elements) {
            this.page_elements[page_element_name].reference = GSStoryPage.NewElement(this.story_page, GSStoryPage.SPET_TEXT, 1, page_element.text_method(vulcan_town));
        }
    }

    function TestCabbage(vulcan_town) {
        local cabbage = ["Ham", "Eggs", "Popeye", "Alligator", "Zebedee", "The KLF"][GSBase.RandRange(5)];
        return GSText(GSText.STR_TOWN_STORY_PAGE_TEST, cabbage);
    }

    function DisplayGrowthRate(vulcan_town) {
        local growth_rate_value_text = GSTown.GetGrowthRate(vulcan_town.town).tostring();
        if (GSTown.GetGrowthRate(vulcan_town.town) == GSTown.TOWN_GROWTH_NONE) {
            growth_rate_value_text = " not growing";
        }
        return GSText(GSText.STR_TOWN_STORY_PAGE_GROWTH_RATE, growth_rate_value_text);
    }

    function UpdatePage(vulcan_town) {
        foreach (page_element_name, page_element in this.page_elements) {
            GSStoryPage.UpdateElement(page_element.reference, 1, page_element.text_method(vulcan_town));
        }
        GSStoryPage.SetDate(this.story_page, GSDate.GetCurrentDate());
    }
}
