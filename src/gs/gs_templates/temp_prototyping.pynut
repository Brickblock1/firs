function set_var_47_bits_test()
{
    /* proof of concept for setting var 47 bits */
    local industry_list = GSIndustryList();
    foreach (industry, _ in industry_list) {
        local industry_flags = GSIndustry.GetControlFlags(industry);
        GSIndustry.SetControlFlags(industry, industry_flags | GSIndustry.INDCTL_NO_CLOSURE | GSIndustry.INDCTL_NO_PRODUCTION_INCREASE | GSIndustry.INDCTL_NO_PRODUCTION_DECREASE)

        /* unrelated test for getting nearest town name */
        /*
        local closest_town = GSTile.GetClosestTown(GSIndustry.GetLocation(industry));
        Log.Info(GSIndustry.GetName(industry) + " " + GSTown.GetName(closest_town), Log.LVL_INFO);
        */
    }
}

function set_town_text_test()
{
    return true;
    /* proof of concept for setting town window text */


    local town_list = GSTownList();
    foreach (town, _ in town_list) {
        local cabbage = GSText(GSText.STR_CABBAGE, GSBase.Rand());
        GSTown.SetText(town, cabbage);
        /*
        local town_location = GSTown.GetLocation(town);
        local industry_list = GSIndustryList();
        industry_list.Valuate(GSIndustry.GetIndustryType);
        industry_list.KeepValue(1); // temp hax to find coal mine
        industry_list.Valuate(GSIndustry.GetDistanceManhattanToTile, town_location);
        industry_list.Sort(GSList.SORT_BY_VALUE, GSList.SORT_ASCENDING);
        industry_list.KeepTop(1);
        local cabbage = GSText(GSText.STR_CABBAGE, industry_list.Begin());
        */
        /*
        foreach (industry, distance_from_town in industry_list) {
            Log.Info(GSTown.GetName(town) + " " + GSIndustry.GetName(industry) + " " + distance_from_town, Log.LVL_INFO);
        }
        */
    }
}

function set_town_growth_rate()
{
    local time_start = GSDate.GetSystemTime();
    Log.Error("Setting town growth rates");
    local town_list = GSTownList();
    foreach (town, _ in town_list) {
        GSTown.SetGrowthRate(town, 1);
    }
    Log.Info("Town growth rates set. Elapsed time: " + (GSDate.GetSystemTime() - time_start));
}

function regions_test()
{
    ::test_regions <- {}
    local counter = 0;
    // don't create the areas inside the loop, it bloats RAM use horrifically and won't be garbage collected
    local circle_1 = Circle2(GSMap.GetTileIndex(100, 100), 32);
    local circle_2 = Circle2(GSMap.GetTileIndex(500, 100), 32);
    local circle_3 = Circle2(GSMap.GetTileIndex(500, 500), 32);
    local circle_4 = Circle2(GSMap.GetTileIndex(100, 500), 32);
    local circle_5 = Circle2(GSMap.GetTileIndex(200, 500), 32);
    local circle_6 = Circle2(GSMap.GetTileIndex(200, 500), 32);
    local circle_7 = Circle2(GSMap.GetTileIndex(200, 500), 32);
    local rect_1 = Rect2(GSMap.GetTileIndex(0, 0), GSMap.GetTileIndex(300, 300));
    local exclusion_circle_1 = Circle2(GSMap.GetTileIndex(300, 300), 32);
    local exclusion_circle_2 = Circle2(GSMap.GetTileIndex(100, 100), 32);
    local exclusion_circle_3 = Circle2(GSMap.GetTileIndex(300, 300), 32);
    local exclusion_circle_4 = Circle2(GSMap.GetTileIndex(400, 400), 32);
    do {
        ::test_regions[counter] <- Region();
        ::test_regions[counter].AddArea(rect_1);
        ::test_regions[counter].AddArea(circle_1);
        ::test_regions[counter].AddArea(circle_2);
        ::test_regions[counter].AddArea(circle_3);
        ::test_regions[counter].AddArea(circle_4);
        ::test_regions[counter].AddArea(circle_5);
        ::test_regions[counter].AddArea(circle_6);
        ::test_regions[counter].AddArea(circle_7);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_1);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_2);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_3);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_4);
        counter++;
    }
    while (counter < 5);

    local foo = test_regions[0].GetUnifiedAreas();
    /*
    foreach (tile in test_regions[0].GetUnifiedAreas()) {
        GSTile.DemolishTile(tile);
    }
    */

    delete ::test_regions
}
