// this is all prototype stuff as of Jan 2023, nothing here is proper lib

function firs::GetIndustryTypeCount(industry_type)
{
    local industry_list = GSIndustryList();
    industry_list.Valuate(GSIndustry.GetIndustryType);
    industry_list.KeepValue(industry_type);
    return industry_list.Count();
}

function firs::BuildIndustryTypeInTown(industry_type, town)
{
    // write our own version of prospecting, scoped to a town

    // this area isn't actually scoped to the town, it's just a circle around it in which to check tiles, we'll filter by GetClosestTown later
    local town_circular_area = Circle2(GSTown.GetLocation(town), 32).GetTiles();

    local result = false;
    do {
        local rand_index = GSBase.RandRange(town_circular_area.len());
        local tile = town_circular_area[rand_index];
        town_circular_area.remove(rand_index);
        if (GSTile.GetClosestTown(tile) == town) {
            local tm = GSTestMode();
            if (GSIndustryType.BuildIndustry(industry_type, tile) == true) {
                local foo = GSExecMode();
                GSIndustryType.BuildIndustry(industry_type, tile);
                result = true;
                break;
            }
        }
    }
    while (town_circular_area.len() > 0);
    return result
}


function count_farms()
{
    local time_start = GSDate.GetSystemTime();
    local farm_id = GSIndustryType.ResolveNewGRFID(firs.grfid, firs.industries.farm.numeric_id);
    local farm_count = firs.GetIndustryTypeCount(farm_id);
    local town_list = GSTownList();
    local target_farm_count = town_list.Count() / 2; // half the towns get farms
    local num_farms_to_build = target_farm_count - farm_count;
    if (farm_count < target_farm_count) {
        Log.Info("Trying to build " + (num_farms_to_build) + " farm(s)...");
        // randomise and remove half the list
        town_list.Valuate(GSBase.RandItem);
        town_list.Sort(GSList.SORT_BY_VALUE, GSList.SORT_ASCENDING);
        town_list.KeepTop(num_farms_to_build);
        foreach (town, _ in town_list) {
            local success = firs.BuildIndustryTypeInTown(farm_id, town);
            if (success == false) {
                Log.Info("Couldn't build farm in " + GSTown.GetName(town));
            }
        }
    }
    Log.Info("Farm count done.");
    Log.Info((GSDate.GetSystemTime() - time_start) + " seconds(s)");
}

function count_scrap_yards()
{
    local time_start = GSDate.GetSystemTime();
    local scrap_yard_id = GSIndustryType.ResolveNewGRFID(firs.grfid, firs.industries.scrap_yard.numeric_id);
    local towns_with_scrap_yards = {};
    local industry_list = GSIndustryList();
    foreach (industry, _ in industry_list) {
        if (GSIndustry.GetIndustryType(industry) == scrap_yard_id) {
            local industry_town = GSTile.GetClosestTown(GSIndustry.GetLocation(industry));
            towns_with_scrap_yards[industry_town] <- true;
        }
    }
    local town_list = GSTownList();
    // filter town list to remove towns that are too small
    town_list.Valuate(GSTown.GetPopulation);
    town_list.KeepAboveValue(400); // this 400 would be fetched from the python industry definition ideally (totally possible via templating or FIRS -> GS industry structure)
    // we want scrap yards in 2/3 towns with large enough population
    local target_scrap_yard_count = (town_list.Count() * 0.66).tointeger();
    local num_scrap_yards_to_build = target_scrap_yard_count - towns_with_scrap_yards.len();
    foreach (town, _ in town_list) {
        if (town in towns_with_scrap_yards) {
            town_list.RemoveItem(town);
        }
    }
    // now randomise the list and trim it to a target number of towns
    town_list.Valuate(GSBase.RandItem);
    town_list.Sort(GSList.SORT_BY_VALUE, GSList.SORT_ASCENDING);
    town_list.KeepTop(num_scrap_yards_to_build);
    foreach (town, _ in town_list) {
        Log.Info("Trying to build " + num_scrap_yards_to_build + " scrap yard(s)...");
        local success = firs.BuildIndustryTypeInTown(scrap_yard_id, town);
        if (success == false) {
            Log.Info("Couldn't build scrap yard in " + GSTown.GetName(town));
        }
    }
    Log.Info("Scrap yard count done.");
    Log.Info((GSDate.GetSystemTime() - time_start) + " second(s)");
}
