function set_var_47_bits_test()
{
    /* proof of concept for setting var 47 bits */
    local industry_list = GSIndustryList();
    foreach (industry, _ in industry_list) {
        local industry_flags = GSIndustry.GetControlFlags(industry);
        GSIndustry.SetControlFlags(industry, industry_flags | GSIndustry.INDCTL_NO_CLOSURE | GSIndustry.INDCTL_NO_PRODUCTION_INCREASE | GSIndustry.INDCTL_NO_PRODUCTION_DECREASE)

        /* unrelated test for getting nearest town name */
        /*
        local closest_town = GSTile.GetClosestTown(GSIndustry.GetLocation(industry));
        Log.Info(GSIndustry.GetName(industry) + " " + GSTown.GetName(closest_town), Log.LVL_INFO);
        */
    }
}

function set_town_text_test()
{
    return true;
    /* proof of concept for setting town window text */

    local town_list = GSTownList();
    foreach (town, _ in town_list) {
        local cabbage = GSText(GSText.STR_CABBAGE, GSBase.Rand());
        GSTown.SetText(town, cabbage);
        /*
        local town_location = GSTown.GetLocation(town);
        local industry_list = GSIndustryList();
        industry_list.Valuate(GSIndustry.GetIndustryType);
        industry_list.KeepValue(1); // temp hax to find coal mine
        industry_list.Valuate(GSIndustry.GetDistanceManhattanToTile, town_location);
        industry_list.Sort(GSList.SORT_BY_VALUE, GSList.SORT_ASCENDING);
        industry_list.KeepTop(1);
        local cabbage = GSText(GSText.STR_CABBAGE, industry_list.Begin());
        */
        /*
        foreach (industry, distance_from_town in industry_list) {
            Log.Info(GSTown.GetName(town) + " " + GSIndustry.GetName(industry) + " " + distance_from_town, Log.LVL_INFO);
        }
        */
    }
}


function LocalGetIndustryTypeCount(industry_type)
{
    local industry_list = GSIndustryList();
    local count = 0;
    foreach (industry, _ in industry_list) {
        if (GSIndustry.GetIndustryType(industry) == industry_type) {
            count++;
        }
    }
    return count;
}

function LocalBuildAnIndustryTypeIfTargetCountNotMet(industry_type, target_count)
{
    local num_industries_to_build = target_count - LocalGetIndustryTypeCount(industry_type);
    if (num_industries_to_build > 0) {
        for (local i = 0; i < num_industries_to_build; i++) {
            Log.Info("need to build some " + GSIndustryType.GetName(industry_type) + "industries...");
            GSIndustryType.ProspectIndustry(industry_type);
        }
    }
}

function count_farms()
{
    local time_start = GSDate.GetSystemTime();
    // really we're going to need to check the economy more like the entire context for the script, eh?
    if (firs.get_economy_id() == 5) {
        Log.Info("It's Steeltown");
    }
    // but eh, let's press on
    local farm_id = GSIndustryType.ResolveNewGRFID(firs.grfid, firs.industries.farm.numeric_id);
    local farm_count = LocalGetIndustryTypeCount(farm_id);
    Log.Info("farm count: " + farm_count);
    Log.Info("town count: " + GSTown.GetTownCount());
    LocalBuildAnIndustryTypeIfTargetCountNotMet(farm_id, (GSTown.GetTownCount() / 2));
    local builders_yard_id = GSIndustryType.ResolveNewGRFID(firs.grfid, firs.industries.builders_yard.numeric_id);
    LocalBuildAnIndustryTypeIfTargetCountNotMet(builders_yard_id, (GSTown.GetTownCount() / 3));
    Log.Info("elapsed time: " + (GSDate.GetSystemTime() - time_start));
}

function count_scrap_yards()
{
    local time_start = GSDate.GetSystemTime();
    local scrap_yard = GSIndustryType.ResolveNewGRFID(firs.grfid, firs.industries.scrap_yard.numeric_id);
    local towns_with_scrap_yards = {};
    local industry_list = GSIndustryList();
    foreach (industry, _ in industry_list) {
        if (GSIndustry.GetIndustryType(industry) == scrap_yard) {
            local industry_town = GSTile.GetClosestTown(GSIndustry.GetLocation(industry));
            towns_with_scrap_yards[industry_town] <- true;
        }
    }
    local town_list = GSTownList();
    foreach (town, _ in town_list) {
        if (town in towns_with_scrap_yards) {
            Log.Info(GSTown.GetName(town) + " has a scrap yard");
        } else if (GSTown.GetPopulation(town) < 400) {
            // ^^ this 400 would be fetched from the python industry definition ideally (totally possible via templating or FIRS -> GS industry structure)
            continue;
        } else {
            Log.Info(GSTown.GetName(town) + " needs a scrap yard");
            foreach (tile, _ in areas.towns[town]) {
                if (GSIndustryType.BuildIndustry(scrap_yard, tile)) {
                    break;
                }
            }
        }

    }
    //LocalBuildAnIndustryTypeIfTargetCountNotMet(scrap_yard_id, (GSTown.GetTownCount() / 3));
    Log.Info("elapsed time: " + (GSDate.GetSystemTime() - time_start));
}


areas <- {};
areas.towns <- {};

function tile_walker()
{
    local time_start = GSDate.GetSystemTime();
    Log.Error("Starting tile walk");
    local town_list = GSTownList();
    foreach (town, _ in town_list) {
        areas.towns[town] <- GSTileList();
    }
    local tile_list = GSTileList();
    // the map contains a row of void or water tiles around it (depending on freeform map edge settings), so our rect is pushed in by 1 tile row/col  on all sides
    tile_list.AddRectangle(GSMap.GetTileIndex(1, 1), GSMap.GetTileIndex(GSMap.GetMapSizeX() - 2, GSMap.GetMapSizeY() - 2));
    foreach (tile, _ in tile_list) {
        areas.towns[GSTile.GetClosestTown(tile)].AddTile(tile);
        GSTile.DemolishTile(tile);
    }
    Log.Info(GSTile.RaiseTile(GSMap.GetTileIndex(1, 1), GSTile.SLOPE_N | GSTile.SLOPE_W | GSTile.SLOPE_S));
    GSTile.LevelTiles(GSMap.GetTileIndex(1, 1), GSMap.GetTileIndex(GSMap.GetMapSizeX() - 2, GSMap.GetMapSizeY() - 2));
    for (local i = 0; i < 4; i++) {
        // eyes
        Log.Info(GSTile.RaiseTile(GSMap.GetTileIndex(10, 10), GSTile.SLOPE_N | GSTile.SLOPE_W | GSTile.SLOPE_S | GSTile.SLOPE_E));
        Log.Info(GSTile.RaiseTile(GSMap.GetTileIndex(20, 10), GSTile.SLOPE_N | GSTile.SLOPE_W | GSTile.SLOPE_S | GSTile.SLOPE_E));
        // smile
        GSTile.RaiseTile(GSMap.GetTileIndex(10, 20), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(11, 21), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(12, 22), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(13, 23), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(14, 24), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(15, 24), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(16, 24), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(17, 24), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(18, 23), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(19, 22), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(20, 21), GSTile.SLOPE_N);
        GSTile.RaiseTile(GSMap.GetTileIndex(21, 20), GSTile.SLOPE_N);
    }
    Log.Info("Tile walk done. Elapsed time: " + (GSDate.GetSystemTime() - time_start));
}


function story_lolz()
{
    for (local i = 0; i < 16; i++) {
        local story_pages = GSStoryPageList(i);
        foreach (story_page, _ in story_pages) {
            GSStoryPage.Remove(story_page);
        }
        local foo = GSStoryPage.New(i, "Global Thermonuclear War");
        local go_north = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_PUSH, 1, "Nuke a random city");
        local go_south = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_VEHICLE, 1, "Choose a vehicle");
        local br = GSStoryPage.NewElement(foo, GSStoryPage.SPET_TEXT, 1, "--------------");
        local go_west = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_TILE, 1, "Choose a tile");
        /*
        local foo = GSStoryPage.New(i, "Chocks Away");
        local go_north = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_PUSH, 1, "Fly North");
        local ham = GSStoryPage.MakePushButtonReference(2, 2);
        local go_east = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_PUSH, ham, "Fly East");
        local ham = GSStoryPage.MakePushButtonReference(3, 1);
        local go_west = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_PUSH, ham, "Fly West");
        local bomb = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_PUSH, 5, "Bombs Away!");
        local go_south = GSStoryPage.NewElement(foo, GSStoryPage.SPET_BUTTON_PUSH, 4, "Fly South");
        */
    }
}
