/* ******************************************************************
 * Definition of the industry tile, its callbacks, and graphics chain
 * ******************************************************************/

<tal:include metal:use-macro="load: spritesets.pynml" />

<tal:include metal:use-macro="load: spritelayouts.pynml" />

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:include define="location_checks_tile load: location_check_macros_tile.pynml"
             metal:use-macro="location_checks_tile.macros['render_tree']" />

<tal:include define="animation_macros load: animation_macros.pynml"
             metal:use-macro="animation_macros.macros['tile_animation']" />

<tal:include metal:use-macro="load: properties_tile.pynml" />

/* *************************************************
 * Definition of the industry layouts
 * *************************************************/

<tal:include metal:use-macro="load: layouts.pynml" />

/* *************************************************
 * Definition of the industry
 * *************************************************/

<tal:include define="location_checks_industry load: location_check_macros_industry.pynml"
             metal:use-macro="location_checks_industry.macros['render_tree']" />

<tal:include metal:use-macro="load: availability.pynml" />

<!--!
    We have a special production code here:
    Production depends on the town population: population / 12 is output
 -->

<tal:economies repeat="economy industry.economies_enabled_for_industry">
    produce (${industry.id}_production_256_economy_${economy.numeric_id},
        [<!--! no acceptance at this industry type -->],
        [
            <tal:produce repeat="cargo industry.get_prod_cargo_types(economy)">
                 <!--!
                    Prod is multiplied by an amount per cargo, and divided by 16.
                    Set multiplier in industry to default of 16, or vary it.
                  -->
                ${cargo[0]}: min(
                                max(
                                    <!--! calculated prod, scaled per cargo. -->
                                    LOAD_TEMP(1) * ${cargo[1]} / 16,
                                    <!--! min prod. -->
                                    LOAD_TEMP(2)
                                ),
                                <!--! max prod. -->
                                LOAD_TEMP(3)
                             );
            </tal:produce>
        ],
    0)
</tal:economies>

switch (FEAT_INDUSTRIES, SELF, ${industry.id}_produce_switch_economy, economy) {
    <tal:economies repeat="economy industry.economies_enabled_for_industry">
        ${economy.numeric_id}: ${industry.id}_production_256_economy_${economy.numeric_id};
    </tal:economies>
}

switch(FEAT_INDUSTRIES, PARENT, ${industry.id}_produce, [
                <!--! calculated production based on population -->
                STORE_TEMP((population + 11) / (12 * 7), 1),
                <!--! min production, around 64t / month, to prevent very small towns having no production
                      divide by 7, as this is the least number of production cycles we'll get in a month (February)
                      Note that integer maths means min. production might not be limited to exact value. -->
                STORE_TEMP(${industry.min_production} / 7, 2),
                <!--! max production, around 2048t / month, to prevent pathological output in large cities
                      divide by 9, as that's the largest number of production cycles we'll get in a month
                      Note that integer maths means max. production might not be limited to exact value. -->
                STORE_TEMP(${industry.max_production} / 9, 3),
            ]
       ) {
	${industry.id}_produce_switch_economy;
}

<!--! end production code -->

<tal:include metal:use-macro="load: properties_industry.pynml" />

<!--! graphics block defined explicitly per industry subclass, to avoid too much fiddly conditional stuff -->
<tal:build_economies repeat="economy industry.economies_enabled_for_industry">
    if (economy==${economy.numeric_id}) {
        item(FEAT_INDUSTRIES, ${industry.id}, ${industry.numeric_id}) {
            graphics {
                produce_256_ticks:       ${industry.id}_produce;
                construction_probability:${industry.id}_check_availability;
                location_check:          ${industry.id}_cabbage;
                monthly_prod_change:     CB_RESULT_IND_PROD_NO_CHANGE;
                random_prod_change:      CB_RESULT_IND_PROD_NO_CHANGE;
                extra_text_fund:         ${industry.get_extra_text_fund(economy)};
                extra_text_industry:     return string(STR_EXTRA_TEXT_TOWN_PRODUCER, ${industry.min_production}, ${industry.max_production});
                colour:                  switch_colour;
            }
        }
    }
</tal:build_economies>
