/* ******************************************************************
 * Definition of the industry tile, its callbacks, and graphics chain
 * ******************************************************************/

<tal:include metal:use-macro="load: spritesets.pynml" />

<tal:include metal:use-macro="load: spritelayouts.pynml" />

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:include define="location_checks_tile load: location_check_macros_tile.pynml"
             metal:use-macro="location_checks_tile.macros['render_tree']" />

<tal:include define="animation_macros load: animation_macros.pynml"
             metal:use-macro="animation_macros.macros['tile_animation']" />

<tal:include metal:use-macro="load: properties_tile.pynml" />


/* *************************************************
 * Definition of the industry
 * *************************************************/

<!--! production behaviour is relativel simple, so no separate template used -->
<tal:economies repeat="economy industry.economies_enabled_for_industry">
    <!--! clear any delivered cargo immediately on arrival -->
    produce (${industry.id}_produce_cargo_arrival_economy_${economy.numeric_id},
        [
            <tal:subtract repeat="cargo industry.get_property('accept_cargo_types', economy)">
                ${cargo}: incoming_cargo_waiting("${cargo}");
            </tal:subtract>
        ],
        [<!--! no production when cargo arrives -->],
    0)
    <!--! some tertiaries also produce, assumed to be on a regular interval (256 ticks) -->
    <tal:has_production condition="industry.has_production">
        produce(${industry.id}_production_256_economy_${economy.numeric_id},
            [<!--! no accept in 256 cb -->],
            [
                <tal:produce repeat="cargo industry.get_prod_cargo_types(economy)">
                    <!--!
                          simply replicates default ottd prod. algorithm but in prod. cb, so action 0 prod. properties can be set 0
                          prod. cb is used consistently in FIRS, to reduce the number of different prod. methods in use
                          calculation is (cargo amount * industry prod level) / default prod level
                    -->
                    ${cargo[0]}: (${cargo[1]} * production_level) / 16;
                </tal:produce>
            ],
        0)
    </tal:has_production>
</tal:economies>
<!--! end production behaviour -->

<tal:include metal:use-macro="load: layouts.pynml" />

<tal:include metal:use-macro="load: availability.pynml" />

<tal:include define="location_checks_industry load: location_check_macros_industry.pynml"
             metal:use-macro="location_checks_industry.macros['render_tree']" />

<tal:include metal:use-macro="load: properties_industry.pynml" />

<!--! graphics block defined explicitly per industry subclass, to avoid too much fiddly conditional stuff -->
<tal:economies repeat="economy industry.economies_enabled_for_industry">
    if (economy==${economy.numeric_id}) {
        item(FEAT_INDUSTRIES, ${industry.id}, ${industry.numeric_id}) {
            graphics {
                construction_probability: ${industry.id}_check_availability;
                build_prod_change:        randomise_primary_production_on_build(${1 if industry.TEST_is_keystone else 0});
                produce_cargo_arrival:    ${industry.id}_produce_cargo_arrival_economy_${economy.numeric_id};
                <tal:has_production condition="industry.has_production">
                    produce_256_ticks:        ${industry.id}_production_256_economy_${economy.numeric_id};
                </tal:has_production>
                location_check:           ${industry.id}_check_location;
                extra_text_fund:          ${industry.get_extra_text_fund(economy)};
                <!--! The 0x3800 expressions here are related to using extended cb 37 before nml support was added, and can be removed when nml is updated -->
                cargo_subtype_display:    return 0x3800 + string(STR_EMPTY);
                colour:                   switch_colour;
            }
        }
    }
</tal:economies>
