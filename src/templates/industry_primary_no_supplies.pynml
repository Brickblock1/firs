/* ******************************************************************
 * Definition of the industry tile, its callbacks, and graphics chain
 * ******************************************************************/

<tal:include metal:use-macro="load: spritesets.pynml" />

<tal:include metal:use-macro="load: spritelayouts.pynml" />

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:include define="location_checks_tile load: location_check_macros_tile.pynml"
             metal:use-macro="location_checks_tile.macros['render_tree']" />

<tal:include define="animation_macros load: animation_macros.pynml"
             metal:use-macro="animation_macros.macros['tile_animation']" />

<tal:include metal:use-macro="load: properties_tile.pynml" />


/* *************************************************
 * Definition of the industry
 * *************************************************/

<!--! production behaviour is simple, so no separate template used -->

<tal:economies repeat="economy economies">
    produce(${industry.id}_production_256_economy_${economy.numeric_id},
        [<!--! no accept in 256 cb -->],
        [
            <tal:produce repeat="cargo industry.get_prod_cargo_types(economy)">
                <!--!
                      simply replicates default ottd prod. algorithm but in prod. cb, so action 0 prod. properties can be set 0
                      prod. cb is used consistently in FIRS, to reduce the number of different prod. methods in use
                      calculation is (cargo amount * industry prod level) / default prod level
                -->
                ${cargo[0]}: (${cargo[1]} * production_level) / 16;
            </tal:produce>
        ],
    0)
</tal:economies>

switch (FEAT_INDUSTRIES, SELF, ${industry.id}_produce_256_ticks, economy) {
<tal:economies repeat="economy economies">
    ${economy.numeric_id}: ${industry.id}_production_256_economy_${economy.numeric_id};
</tal:economies>
}

<!--! end production behaviour -->

<tal:include metal:use-macro="load: layouts.pynml" />

<tal:include metal:use-macro="load: availability.pynml" />

<tal:include define="location_checks_industry load: location_check_macros_industry.pynml"
             metal:use-macro="location_checks_industry.macros['render_tree']" />

<tal:include metal:use-macro="load: properties_industry.pynml" />

switch(FEAT_INDUSTRIES, PARENT, ${industry.id}_randomise_primary_production_on_build_foo,
    <tal:block condition="industry.test_town_industry_type is not None">
        STORE_PERM(${industry.test_town_industry_type}, 1)
    </tal:block>
    <tal:block condition="industry.test_town_industry_type is None">
        0
    </tal:block>
        ){
    return randomise_primary_production_on_build;
}


<!--! graphics block defined explicitly per industry subclass, to avoid too much fiddly conditional stuff -->
<!--! no economy support currently -->
item(FEAT_INDUSTRIES, ${industry.id}, ${industry.numeric_id}) {
	graphics {
		construction_probability: ${industry.id}_check_availability;
        build_prod_change:        ${industry.id}_randomise_primary_production_on_build_foo;
        produce_256_ticks:        ${industry.id}_produce_256_ticks;
		location_check:           ${industry.id}_check_location;
		monthly_prod_change:      return CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change:       return CB_RESULT_IND_PROD_NO_CHANGE;
		colour:                   switch_colour;
	}
}
